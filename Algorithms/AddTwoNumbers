package leetcode;


 // Definition for singly-linked list.

 
public class AddTwoNumbers {
	  public class ListNode {
	      int val;
	     ListNode next;
	      ListNode(int x) {
	          val = x;
	          next = null;
	      }
	  }
// better way 
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // Start typing your Java solution below
        // DO NOT write main() function
        int carry =0;
        ListNode res = new ListNode(0);
        ListNode cur1 = l1, cur2 = l2, head=res;
        while(cur1!=null || cur2!=null){
            if(cur1!=null){
                carry+=cur1.val;
                cur1=cur1.next;
            }
            if(cur2!=null){
                carry+=cur2.val;
                cur2=cur2.next;
            }
            head.next=new ListNode(carry%10);
            head=head.next;
            carry/=10;
        }
        if(carry==1) head.next=new ListNode(1);
        return res.next;
    }
}

// without using +
//http://javarevisited.blogspot.com/2013/06/how-to-add-two-integer-numbers-without-plus-arithmetic-operator-java-example.html
// Iterative Solution
public static int addIterative(int a, int b){  
        while (b != 0){
            int carry = (a & b) ; //CARRY is AND of two bits
          
            a = a ^b; //SUM of two bits is A XOR B
          
            b = carry << 1; //shifts carry to 1 bit to calculate sum
        }
        return a;
 }
 // recursion solution
 public static int add(int a, int b){
        if(b == 0) return a;
        int sum = a ^ b; //SUM of two integer is A XOR B
        int carry = (a & b) << 1;  //CARRY of two integer is A AND B
        return add(sum, carry);
 }



Read more: http://javarevisited.blogspot.com/2013/06/how-to-add-two-integer-numbers-without-plus-arithmetic-operator-java-example.html#ixzz2tiERVrM2
