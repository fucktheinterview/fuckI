//Question: Write an algorithm to print all ways of arranging n queens on a chess board so that none of them share the same row, column or diagonal
//From Xin Guo
//Solution is written by C++

#include <iostream>
#include <string>
#include <vector>
using namespace std;

class position
{
public:
	position();
	position(int a, int b);
	int x;
	int y;
};

inline position::position()
{
	x = 0;
	y = 0;
}

inline position::position(int a, int b)
{
	x = a;
	y = b;
}

void putqueen(int n, vector<vector<int> > &board, vector<position> &solution)
{
	if (n == 0)
	{ 
		for (int i = 0; i != solution.size(); ++i)
		{
			cout << solution[i].x << "		"<<solution[i].y << endl;
		}
		cout << "~~~~~~~~~~~~~~~~~~~~~~~~" << endl << endl;
		return;
	}
	for (int i = 0; i != board.size(); ++i)
	{
		for (int j = 0; j != board.size(); ++j)
		{
			if (board[i][j] == 0)
			{
//add to solution
			    position p(i,j);
			    solution[n-1] = p;
//coloring
				for (int k = 0; k != board.size(); ++k)
			    {
				    board[i][k] = 1;
				    board[k][j] = 1;
			    }
			    for (int p = 0; p != board.size(); ++p)
			    {
				    for (int q = 0; q != board.size(); ++q)
				    {
					    if (((p-i) == (q-j))||((p-i) == (j-q)))
					    {
						    board[p][q] = 1;
					    }
				    }
			    }
//add another queen
				putqueen(n-1, board, solution);
			}
		}
	}
}


int main()
{
	int n;
	cin >> n;
	vector<vector<int> > board(8);
	for (int i = 0; i != board.size(); ++i)
	{
		board[i].resize(8);
	}

//~~~~~~~~~~~~~~~~here~~~~~~~~~~~~~~~~~~~~~~~~~
	vector<position> solution(n);

	putqueen(n, board, solution);

	system("pause");
}
